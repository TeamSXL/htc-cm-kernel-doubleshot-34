--- drivers/gpu/msm/kgsl_sharedmem.h
+++ drivers/gpu/msm/kgsl_sharedmem.h
@@ -19,7 +19,8 @@
 #include "kgsl_mmu.h"
 #include <linux/slab.h>
 #include <linux/kmemleak.h>
-#include <linux/sched.h>
+
+#include "kgsl_log.h"
 
 struct kgsl_device;
 struct kgsl_process_private;
@@ -160,37 +188,25 @@
 kgsl_allocate(struct kgsl_memdesc *memdesc,
 		struct kgsl_pagetable *pagetable, size_t size)
 {
-	int ret = 1;
 	if (kgsl_mmu_get_mmutype() == KGSL_MMU_TYPE_NONE)
 		return kgsl_sharedmem_ebimem(memdesc, pagetable, size);
-
-	if(size >= SZ_4M)
-		ret = kgsl_sharedmem_ion_alloc(memdesc, pagetable, size);
-
-	if(ret)
-		return kgsl_sharedmem_page_alloc(memdesc, pagetable, size);
-	return ret;
+	memdesc->flags |= (KGSL_MEMTYPE_KERNEL << KGSL_MEMTYPE_SHIFT);
+	return kgsl_sharedmem_page_alloc(memdesc, pagetable, size);
 }
 
 static inline int
 kgsl_allocate_user(struct kgsl_memdesc *memdesc,
-		struct kgsl_process_private *private,
 		struct kgsl_pagetable *pagetable,
 		size_t size, unsigned int flags)
 {
-	int ret = 1;
-	char task_comm[TASK_COMM_LEN];
+	int ret;
 
-	if (kgsl_mmu_get_mmutype() == KGSL_MMU_TYPE_NONE)
-		return kgsl_sharedmem_ebimem_user(memdesc, pagetable, size,
-						  flags);
-	if(size >= SZ_4M)
-		ret = kgsl_sharedmem_ion_alloc_user(memdesc, private, pagetable, size, flags);
-	else if ( size >= SZ_1M && strcmp("om.htc.launcher", get_task_comm(task_comm, current->group_leader)) == 0 )
-		ret = kgsl_sharedmem_ion_alloc_user(memdesc, private, pagetable, size, flags);
+	memdesc->flags = flags;
 
-	if(ret)
-		return kgsl_sharedmem_page_alloc_user(memdesc, private, pagetable, size, flags);
+	if (kgsl_mmu_get_mmutype() == KGSL_MMU_TYPE_NONE)
+		ret = kgsl_sharedmem_ebimem_user(memdesc, pagetable, size);
+	else
+		ret = kgsl_sharedmem_page_alloc_user(memdesc, pagetable, size);
 
 	return ret;
 }
